import { createClient } from '@supabase/supabase-js';

// C·∫•u h√¨nh Supabase
const SUPABASE_URL = 'https://bhewlutzthgxcgcmyizy.supabase.co'
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJoZXdsdXR6dGhneGNnY215aXp5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzA5NjQ0NCwiZXhwIjoyMDcyNjcyNDQ0fQ.XpAysBnGRQRimjetCzPd1wvegh3IPogZKjc2nb13dCY'

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Th√¥ng tin t√†i kho·∫£n nh√¢n vi√™n HN35
const EMPLOYEE_DATA = {
  email: 'ranhn35@ran.com',
  full_name: 'Nh√¢n vi√™n HN35',
  role: 'employee',
  branch: 'hn35',
  approval_status: 'approved'
};

async function fixHN35Employee() {
  try {
    console.log('üîß S·ª≠a ch·ªØa t√†i kho·∫£n nh√¢n vi√™n HN35...');
    
    // B∆∞·ªõc 1: T√¨m auth user theo email
    console.log('üîç T√¨m auth user theo email...');
    const { data: users, error: listError } = await supabase.auth.admin.listUsers();
    
    if (listError) {
      console.error('‚ùå L·ªói l·∫•y danh s√°ch users:', listError.message);
      return;
    }
    
    const existingUser = users.users.find(user => user.email === EMPLOYEE_DATA.email);
    
    if (!existingUser) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y auth user v·ªõi email:', EMPLOYEE_DATA.email);
      console.log('üí° H√£y ch·∫°y script t·∫°o m·ªõi: node scripts/create-hn35-employee-complete.js');
      return;
    }
    
    console.log('‚úÖ T√¨m th·∫•y auth user:', existingUser.id);
    
    // B∆∞·ªõc 2: Ki·ªÉm tra profile hi·ªán c√≥
    console.log('üìã Ki·ªÉm tra profile hi·ªán c√≥...');
    const { data: existingProfile, error: profileCheckError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', existingUser.id)
      .single();
    
    if (existingProfile) {
      console.log('‚ö†Ô∏è  Profile ƒë√£ t·ªìn t·∫°i, ƒëang c·∫≠p nh·∫≠t...');
      
      // C·∫≠p nh·∫≠t profile
      const { error: updateError } = await supabase
        .from('profiles')
        .update({
          email: EMPLOYEE_DATA.email,
          full_name: EMPLOYEE_DATA.full_name,
          role: EMPLOYEE_DATA.role,
          branch: EMPLOYEE_DATA.branch,
          approval_status: EMPLOYEE_DATA.approval_status,
          updated_at: new Date().toISOString()
        })
        .eq('id', existingUser.id);
      
      if (updateError) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t profile:', updateError.message);
        return;
      }
      
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t profile th√†nh c√¥ng!');
    } else {
      console.log('üìù T·∫°o profile m·ªõi...');
      
      // T·∫°o profile m·ªõi
      const { error: createError } = await supabase
        .from('profiles')
        .insert({
          id: existingUser.id,
          email: EMPLOYEE_DATA.email,
          full_name: EMPLOYEE_DATA.full_name,
          role: EMPLOYEE_DATA.role,
          branch: EMPLOYEE_DATA.branch,
          approval_status: EMPLOYEE_DATA.approval_status
        });
      
      if (createError) {
        console.error('‚ùå L·ªói t·∫°o profile:', createError.message);
        return;
      }
      
      console.log('‚úÖ ƒê√£ t·∫°o profile th√†nh c√¥ng!');
    }
    
    // B∆∞·ªõc 3: X√°c minh k·∫øt qu·∫£
    console.log('üîç X√°c minh k·∫øt qu·∫£...');
    const { data: finalProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', existingUser.id)
      .single();
    
    console.log('\nüéâ T√†i kho·∫£n nh√¢n vi√™n HN35 ƒë√£ s·∫µn s√†ng!');
    console.log('üìã Th√¥ng tin t√†i kho·∫£n:');
    console.log('   - Email:', finalProfile.email);
    console.log('   - M·∫≠t kh·∫©u: 123123');
    console.log('   - T√™n:', finalProfile.full_name);
    console.log('   - Vai tr√≤:', finalProfile.role);
    console.log('   - Chi nh√°nh:', finalProfile.branch);
    console.log('   - Tr·∫°ng th√°i:', finalProfile.approval_status);
    console.log('   - Auth ID:', existingUser.id);
    console.log('   - Profile ID:', finalProfile.id);
    console.log('\nüîê T√†i kho·∫£n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† truy c·∫≠p /HN35-dashboard');
    console.log('üåê Th·ª≠ ƒëƒÉng nh·∫≠p t·∫°i: http://localhost:8080/auth');
    
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error.message);
  }
}

// Ch·∫°y script
fixHN35Employee();