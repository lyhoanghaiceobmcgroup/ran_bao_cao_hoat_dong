import { createClient } from '@supabase/supabase-js';

// C·∫•u h√¨nh Supabase
const SUPABASE_URL = 'https://bhewlutzthgxcgcmyizy.supabase.co'
const SUPABASE_SERVICE_ROLE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJoZXdsdXR6dGhneGNnY215aXp5Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzA5NjQ0NCwiZXhwIjoyMDcyNjcyNDQ0fQ.XpAysBnGRQRimjetCzPd1wvegh3IPogZKjc2nb13dCY'

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Th√¥ng tin t√†i kho·∫£n nh√¢n vi√™n HN35
const EMPLOYEE_DATA = {
  email: 'ranhn35@ran.com',
  password: '123123',
  full_name: 'Nh√¢n vi√™n HN35',
  role: 'employee',
  branch: 'hn35',
  approval_status: 'approved'
};

async function createHN35Employee() {
  try {
    console.log('üöÄ T·∫°o t√†i kho·∫£n nh√¢n vi√™n HN35...');
    
    // B∆∞·ªõc 1: Ki·ªÉm tra xem t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
    console.log('üìã Ki·ªÉm tra t√†i kho·∫£n hi·ªán c√≥...');
    const { data: existingProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', EMPLOYEE_DATA.email)
      .single();
    
    if (existingProfile) {
      console.log('‚ö†Ô∏è  T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i:', existingProfile.email);
      console.log('üìä Th√¥ng tin hi·ªán t·∫°i:');
      console.log('   - ID:', existingProfile.id);
      console.log('   - T√™n:', existingProfile.full_name);
      console.log('   - Vai tr√≤:', existingProfile.role);
      console.log('   - Chi nh√°nh:', existingProfile.branch);
      console.log('   - Tr·∫°ng th√°i:', existingProfile.approval_status);
      
      // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu c·∫ßn
      const { error: updateError } = await supabase
        .from('profiles')
        .update({
          full_name: EMPLOYEE_DATA.full_name,
          role: EMPLOYEE_DATA.role,
          branch: EMPLOYEE_DATA.branch,
          approval_status: EMPLOYEE_DATA.approval_status,
          updated_at: new Date().toISOString()
        })
        .eq('email', EMPLOYEE_DATA.email);
      
      if (updateError) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t profile:', updateError.message);
      } else {
        console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n!');
      }
      
      return;
    }
    
    // B∆∞·ªõc 2: T·∫°o auth user
    console.log('üë§ T·∫°o auth user...');
    const { data: authData, error: authError } = await supabase.auth.admin.createUser({
      email: EMPLOYEE_DATA.email,
      password: EMPLOYEE_DATA.password,
      email_confirm: true,
      user_metadata: {
        full_name: EMPLOYEE_DATA.full_name
      }
    });
    
    if (authError) {
      console.error('‚ùå L·ªói t·∫°o auth user:', authError.message);
      return;
    }
    
    console.log('‚úÖ Auth user ƒë√£ t·∫°o:', authData.user.id);
    
    // B∆∞·ªõc 3: T·∫°o profile
    console.log('üìù T·∫°o profile...');
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .insert({
        id: authData.user.id,
        email: EMPLOYEE_DATA.email,
        full_name: EMPLOYEE_DATA.full_name,
        role: EMPLOYEE_DATA.role,
        branch: EMPLOYEE_DATA.branch,
        approval_status: EMPLOYEE_DATA.approval_status
      })
      .select()
      .single();
    
    if (profileError) {
      console.error('‚ùå L·ªói t·∫°o profile:', profileError.message);
      
      // X√≥a auth user n·∫øu t·∫°o profile th·∫•t b·∫°i
      await supabase.auth.admin.deleteUser(authData.user.id);
      console.log('üóëÔ∏è  ƒê√£ x√≥a auth user do l·ªói t·∫°o profile');
      return;
    }
    
    console.log('‚úÖ Profile ƒë√£ t·∫°o th√†nh c√¥ng!');
    
    // B∆∞·ªõc 4: X√°c minh t√†i kho·∫£n
    console.log('üîç X√°c minh t√†i kho·∫£n...');
    const { data: verifyData } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', EMPLOYEE_DATA.email)
      .single();
    
    console.log('\nüéâ T√†i kho·∫£n nh√¢n vi√™n HN35 ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
    console.log('üìã Th√¥ng tin t√†i kho·∫£n:');
    console.log('   - Email:', verifyData.email);
    console.log('   - M·∫≠t kh·∫©u:', EMPLOYEE_DATA.password);
    console.log('   - T√™n:', verifyData.full_name);
    console.log('   - Vai tr√≤:', verifyData.role);
    console.log('   - Chi nh√°nh:', verifyData.branch);
    console.log('   - Tr·∫°ng th√°i:', verifyData.approval_status);
    console.log('   - ID:', verifyData.id);
    console.log('\nüîê T√†i kho·∫£n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√† truy c·∫≠p /HN35-dashboard');
    
  } catch (error) {
    console.error('‚ùå L·ªói kh√¥ng mong mu·ªën:', error.message);
  }
}

// Ch·∫°y script
createHN35Employee();