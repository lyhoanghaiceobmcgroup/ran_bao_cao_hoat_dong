import { useAuth } from '@/context/AuthContext';
import { Navigate } from 'react-router-dom';
import ProfileStatusPage from './ProfileStatusPage';
import { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface PrivateRouteProps {
  children: React.ReactNode;
  requireRole?: 'admin' | 'central' | 'trungtam' | 'manager' | 'quanly' | 'staff' | 'nhanvien';
  allowPendingAccounts?: boolean; // Cho ph√©p t√†i kho·∫£n pending truy c·∫≠p m·ªôt s·ªë trang
  requireBranch?: string; // Y√™u c·∫ßu chi nh√°nh c·ª• th·ªÉ
}

export default function PrivateRoute({ 
  children, 
  requireRole, 
  allowPendingAccounts = false,
  requireBranch
}: PrivateRouteProps) {
  const { user, userData, loading, checkAccountStatus } = useAuth();
  const [accountStatusChecked, setAccountStatusChecked] = useState(false);
  const [currentAccountStatus, setCurrentAccountStatus] = useState<string | null>(null);
  const [currentUserRole, setCurrentUserRole] = useState<string | null>(null);
  const [userBranch, setUserBranch] = useState<string | null>(null);

  useEffect(() => {
    const verifyAccountStatus = async () => {
      if (user && !accountStatusChecked) {
        try {
          // Truy v·∫•n tr·∫°ng th√°i v√† vai tr√≤ t·ª´ b·∫£ng profiles
          const { data, error } = await supabase
            .from('profiles')
            .select('status, role_name, branch')
            .eq('user_id', user.id)
            .maybeSingle();
          
          if (error) {
            console.error('Error checking profile status:', error);
            setCurrentAccountStatus('pending');
            setCurrentUserRole(null);
            setUserBranch(null);
          } else if (data) {
            setCurrentAccountStatus((data.status as any) || 'pending');
            setCurrentUserRole(data.role_name || null);
            setUserBranch(data.branch || null);
          } else {
            // Kh√¥ng t√¨m th·∫•y profile - t·∫°o profile m·∫∑c ƒë·ªãnh v√† th√¥ng b√°o l·ªói
            console.warn('No profile found for user:', user.email);
            try {
              // T·∫°o profile m·∫∑c ƒë·ªãnh cho user
              const { error: insertError } = await supabase
                .from('profiles')
                .insert({
                  user_id: user.id,
                  email: user.email,
                  status: 'pending',
                  role_name: 'staff',
                  created_at: new Date().toISOString()
                });
              
              if (insertError) {
                console.error('Error creating default profile:', insertError);
              }
            } catch (createError) {
              console.error('Failed to create default profile:', createError);
            }
            
            setCurrentAccountStatus('pending');
            setCurrentUserRole('staff');
            setUserBranch(null);
          }
        } catch (error) {
          console.error('Error checking account status:', error);
          setCurrentAccountStatus('pending');
          setCurrentUserRole('staff');
        } finally {
          setAccountStatusChecked(true);
        }
      }
    };

    // Reset account status check when user changes
    if (user && accountStatusChecked) {
      setAccountStatusChecked(false);
    }

    verifyAccountStatus();
  }, [user]); // Remove accountStatusChecked from dependencies to prevent infinite loop

  // Hi·ªÉn th·ªã loading khi ƒëang ki·ªÉm tra
  if (loading || !accountStatusChecked) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">ƒêang ki·ªÉm tra quy·ªÅn truy c·∫≠p...</p>
        </div>
      </div>
    );
  }

  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
  if (!user) {
    return <Navigate to="/auth" replace />;
  }

  // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
  const accountStatus = currentAccountStatus || 'pending';

  // Hi·ªÉn th·ªã trang tr·∫°ng th√°i h·ªì s∆° n·∫øu t√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát ho·∫∑c b·ªã t·ª´ ch·ªëi
  if ((accountStatus === 'pending' && !allowPendingAccounts) || accountStatus === 'rejected') {
    return <ProfileStatusPage />;
  }

  // Ki·ªÉm tra vai tr√≤ n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
  if (requireRole && currentUserRole !== requireRole) {
    // Ki·ªÉm tra hierarchy: admin > central/trungtam > manager/quanly > staff/nhanvien
    const roleHierarchy = { 
      admin: 4, 
      central: 3, 
      trungtam: 3, 
      manager: 2, 
      quanly: 2, 
      staff: 1, 
      nhanvien: 1 
    };
    const userRoleLevel = roleHierarchy[currentUserRole as keyof typeof roleHierarchy] || 0;
    const requiredRoleLevel = roleHierarchy[requireRole as keyof typeof roleHierarchy] || 0;

    // N·∫øu user c√≥ role cao h∆°n ho·∫∑c b·∫±ng required role th√¨ ƒë∆∞·ª£c ph√©p truy c·∫≠p
    if (userRoleLevel < requiredRoleLevel) {
      return (
        <div className="min-h-screen bg-gradient-to-br from-red-50 to-red-100 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center">
            <div className="text-red-500 text-6xl mb-4">üö´</div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
            <p className="text-gray-600 mb-4">
              B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o trang n√†y. Y√™u c·∫ßu vai tr√≤: <strong>{requireRole}</strong>
            </p>
            <button 
              onClick={() => typeof window !== 'undefined' && window.history.back()}
              className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
            >
              Quay l·∫°i
            </button>
          </div>
        </div>
      );  
    }
  }

  // Ki·ªÉm tra chi nh√°nh n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
  if (requireBranch && userBranch && userBranch !== requireBranch) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-orange-100 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center">
          <div className="text-orange-500 text-6xl mb-4">üè¢</div>
          <h2 className="text-2xl font-bold text-gray-800 mb-2">Sai chi nh√°nh</h2>
          <p className="text-gray-600 mb-4">
            B·∫°n kh√¥ng thu·ªôc chi nh√°nh ƒë∆∞·ª£c y√™u c·∫ßu. Chi nh√°nh y√™u c·∫ßu: <strong>{requireBranch}</strong>
          </p>
          <button 
            onClick={() => typeof window !== 'undefined' && window.history.back()}
            className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700 transition-colors"
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  // Cho ph√©p truy c·∫≠p n·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu th·ªèa m√£n
  return <>{children}</>;
}